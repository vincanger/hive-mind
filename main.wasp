app HiveMind {
  wasp: {
    version: "^0.7.0"
  },
  title: "HiveMind",
  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      google: {
        getUserFieldsFn: import { getUserFields } from "@server/auth/google.js"
      }
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/",
  },
  db: {
    system: PostgreSQL
  },
  dependencies: [
    ("nodemailer", "6.8.0"),
    ("react-icons", "4.6.0"),
    ("react-simple-tooltip", "2.6.3")
  ]
}

job sendTaskReminder {
  executor: PgBoss, 
  perform: {
    fn: import { emailSender } from "@server/workers/emailSender.js"
  },
  entities: [Task]
}

job findPendingTasks {
  executor: PgBoss,
  perform: {
    fn: import { findTasksToSend } from "@server/workers/findTasksToSend.js"
  },
  schedule: {
    cron: "0 4,16 * * *" // Every day at 4:00 and 16:00. 
  },
  entities: [Task]
}

entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String  
    isAuthComplete    Boolean @default(false)
    externalAuthAssociations SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}

// [] or ? -- Note: You cannot combine type modifiers - optional lists are not supported.
entity Task {=psl
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt  
    name        String    @unique
    status      String    @default("pending")
    message     String
    email       String
    deadline    String
    recurring   Int[]
    emailUrl    String?
psl=}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage.js"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage.js"
}

route About { path: "/about", to: AboutPage }
page AboutPage {
  component: import About from "@client/AboutPage.js"
}

route Tasks { path: "/tasks", to: TasksPage }
page TasksPage {
  authRequired: true,
  component: import Tasks from "@client/TasksPage.js"
}

query getPendingTasks {
  fn: import { getPendingTasks } from "@server/queries.js",
  entities: [Task]
}

query getCompletedTasks {
  fn: import { getCompletedTasks } from "@server/queries.js",
  entities: [Task]
}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}
